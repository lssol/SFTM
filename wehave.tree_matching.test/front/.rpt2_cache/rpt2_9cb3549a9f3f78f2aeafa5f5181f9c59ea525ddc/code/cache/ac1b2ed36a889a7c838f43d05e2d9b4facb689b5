{"code":"import * as tslib_1 from \"tslib\";\r\nimport { RTED } from 'tree-matching';\r\nimport { tree1, tree2 } from \"./common\";\r\nconst dagre = require(\"cytoscape-dagre\");\r\nconst cytoscape = require(\"cytoscape\");\r\nconst generateId = () => {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n};\r\nconst params = {\r\n    relabelCost: 1,\r\n    deletionCost: 1,\r\n    insertionCost: 1,\r\n    rtedApiUrl: \"http://localhost:7000\"\r\n};\r\nconst test_cyto = () => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    cytoscape.use(dagre);\r\n    const t0 = performance.now();\r\n    const { distance, matching } = yield RTED.matchTrees(params)(tree1, tree2);\r\n    const t1 = performance.now();\r\n    console.log('took: ' + (t1 - t0));\r\n    console.log(matching);\r\n    const combinedGraph = (() => {\r\n        const getElementsDefinitionWithNewIds = (tree) => {\r\n            const treeIdMap = new Map();\r\n            tree.nodes().forEach(node => { treeIdMap.set(node.id(), generateId()); });\r\n            const nodes = tree.nodes().reduce((result, node) => {\r\n                const nodeDef = {\r\n                    group: 'nodes',\r\n                    data: {\r\n                        id: treeIdMap.get(node.id()),\r\n                        value: node.data('value'),\r\n                    }\r\n                };\r\n                const edgeDef = (node.parent().size() === 0 ? [] : {\r\n                    group: 'edges',\r\n                    data: {\r\n                        id: generateId(),\r\n                        source: treeIdMap.get(node.parent().first().id()),\r\n                        target: treeIdMap.get(node.id())\r\n                    }\r\n                });\r\n                return [...result, nodeDef, edgeDef];\r\n            }, []);\r\n            return [nodes, treeIdMap];\r\n        };\r\n        const [elements1, treeIdMap1] = getElementsDefinitionWithNewIds(tree1);\r\n        const [elements2, treeIdMap2] = getElementsDefinitionWithNewIds(tree2);\r\n        const newEdges = matching.map(({ id1, id2 }) => {\r\n            return {\r\n                group: 'edges',\r\n                data: {\r\n                    id: generateId(),\r\n                    source: treeIdMap1.get(id1) || 'noMatch1',\r\n                    target: treeIdMap2.get(id2) || 'noMatch2',\r\n                    matchingEdge: true,\r\n                }\r\n            };\r\n        });\r\n        const graph = cytoscape({\r\n            container: document.getElementById('cy'),\r\n            elements: [...elements1, ...elements2, ...newEdges,\r\n                {\r\n                    group: 'nodes',\r\n                    data: {\r\n                        id: 'noMatch1',\r\n                        value: 'noMatch1'\r\n                    }\r\n                },\r\n                {\r\n                    group: 'nodes',\r\n                    data: {\r\n                        id: 'noMatch2',\r\n                        value: 'noMatch2'\r\n                    }\r\n                }\r\n            ],\r\n            style: [\r\n                {\r\n                    selector: 'node',\r\n                    style: {\r\n                        'label': 'data(value)',\r\n                    }\r\n                },\r\n                {\r\n                    selector: \"edge[?matchingEdge]\",\r\n                    style: {\r\n                        'line-color': 'red',\r\n                        'width': 0.6,\r\n                        'line-style': 'dashed',\r\n                        'label': 'data(cost)',\r\n                        'font-size': '4'\r\n                    }\r\n                },\r\n            ],\r\n            layout: {\r\n                name: 'dagre'\r\n            }\r\n        });\r\n        graph.elements().not('edge[?matchingEdge]').layout({\r\n            name: 'dagre'\r\n        }).run();\r\n        return graph;\r\n    })();\r\n});\r\ntest_cyto();\r\n//# sourceMappingURL=visualization_rted.js.map","references":["C:/home/dev/src/Wehave/wehave.tree/wehave.tree_matching/wehave.tree_matching.test/front/node_modules/@types/cytoscape/index.d.ts","C:/home/dev/src/Wehave/wehave.tree/wehave.tree_matching/wehave.tree_matching/dist/index.d.ts","C:/home/dev/src/Wehave/wehave.tree/wehave.tree_matching/wehave.tree_matching.test/front/src/common.ts","C:/home/dev/src/Wehave/wehave.tree/wehave.tree_matching/wehave.tree_matching.test/front/node_modules/cytoscape-dagre/cytoscape-dagre.js","C:/home/dev/src/Wehave/wehave.tree/wehave.tree_matching/wehave.tree_matching.test/front/node_modules/@types/cytoscape/index.d.ts"],"map":"{\"version\":3,\"file\":\"visualization_rted.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/visualization_rted.ts\"],\"names\":[],\"mappings\":\"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\"}"}
